properties([
	gitLabConnection('gitlab')
])

node('words-linux') {         
    try {
		gitlabCommitStatus("checkout") {
		   stage('checkout'){
				checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '361885ba-9425-4230-950e-0af201d90547', url: 'https://git.auckland.dynabic.com/words-cloud/words-cloud-node.git']]])
			
				sh "git config user.email \"jenkins.aspose@gmail.com\""
				sh "git config user.name \"jenkins\""
				
				withCredentials([usernamePassword(credentialsId: '361885ba-9425-4230-950e-0af201d90547', usernameVariable: 'gitUsername', passwordVariable: 'gitPass')]) {
					gitRepoUrl = "https://${gitUsername}:${gitPass}@git.auckland.dynabic.com/words-cloud/words-cloud-node.git"
				}
				
				withCredentials([usernamePassword(credentialsId: '6839cbe8-39fa-40c0-86ce-90706f0bae5d', passwordVariable: 'ClientSecret', usernameVariable: 'ClientId')]) {
					sh 'echo "{\\"ClientId\\": \\"$ClientId\\",\\"ClientSecret\\": \\"$ClientSecret\\", \\"BaseUrl\\": \\"https://api-qa.aspose.cloud\\"}" > testConfig.json'
				}
		   }
		}
       
        docker.image('node:latest').inside{
			withEnv(['npm_config_cache=npm-cache', 'HOME=.']) 
			{
				gitlabCommitStatus("build the package") {	   
					stage('build package')
					{
						sh "npm install"
						sh "npm run gulp buildRelease"
						packageName = sh(returnStdout: true, script: 'npm pack').trim()
						
						stash name: "newPackage", includes: "${packageName}" 
					}			
				}
				
				gitlabCommitStatus("replace references") {
					stage('replace references'){
						sh "sed -i 's/asposewordscloud/asposewordscloudtest/g' package.json"
					
						sh "npm uninstall asposewordscloud"
						sh "npm install ${packageName}"
						
						sh "find test -type f -name \"*.ts\" -exec sed -i 's+\".*/src/.*\"+\"asposewordscloud\"+g' {} +"
						sh "find bdd -type f -name \"*.ts\" -exec sed -i 's+\".*/src/.*\"+\"asposewordscloud\"+g' {} +"
					}
				}
				
				gitlabCommitStatus("rebuild with the package") {
					stage('rebuild with the package'){												
						sh "npm run gulp build"
						
						if (params.branch == 'refs/heads/master'){
							sh "npm run lint"
						}
					}
				}
				
				gitlabCommitStatus("package tests") {
					stage('package tests'){   
						try {
							sh "npm run test-jenkins"
						} finally {
							junit 'reports/**.xml'
						}
					}
				}
				
				gitlabCommitStatus("bdd package tests") {
					stage('bdd package tests'){
						try {
							sh "npm run gulp cucumber"
						} finally {
							cucumber 'reports/**.json'
						}
					}
				}
                
				gitlabCommitStatus("audit security") {
					stage('audit security'){												
						sh "npm audit --production --audit-level=moderate"
                    }
                }
			}
		}			                
    } finally {                       
        deleteDir()
		sh 'docker system prune -f'
    }
} 

stage('wait for publish confirmation'){
	timeout(time:1, unit:'DAYS') {
		input message:'Publish packet?'
	}
}

node('words-linux') {         
    try {
		gitlabCommitStatus("checkout again") {
			stage('checkout again'){
			   checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '361885ba-9425-4230-950e-0af201d90547', url: 'https://git.auckland.dynabic.com/words-cloud/words-cloud-node.git']]])          
						
				sh "git config user.email \"jenkins.aspose@gmail.com\""
				sh "git config user.name \"jenkins\""
				
				unstash 'newPackage'
			}
		}
		
		gitlabCommitStatus("publish package") {
			stage('publish package'){
				docker.image('node:latest').inside{
					withEnv(['npm_config_cache=npm-cache', 'HOME=.']) { 
						withCredentials([string(credentialsId: '19f0eab9-c600-4746-a4bd-724efd2102c8', variable: 'npmToken')]) 
						{
							sh "echo //registry.npmjs.org/:_authToken=${npmToken} > .npmrc"
							sh "npm publish ${packageName}"
						}
					}
				}				
			}
		}
		
        gitlabCommitStatus("Merge master to release") {
            stage('Merge master to release'){
                checkout([$class: 'GitSCM', branches: [[name: '*/release']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'LocalBranch', localBranch: "**"]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '361885ba-9425-4230-950e-0af201d90547', url: 'https://git.auckland.dynabic.com/words-cloud/words-cloud-node.git']]])
                sh "git config user.email 'jenkins.aspose@gmail.com'"
                sh "git config user.name 'jenkins'"
                sh "git checkout --merge release"
                sh "git reset --hard origin/release"
                sh "git merge --no-ff --allow-unrelated-histories origin/master"
                sh "git diff --name-status"			
                sh 'git commit -am "Merged master branch to release" || exit 0'
                withCredentials([usernamePassword(credentialsId: '361885ba-9425-4230-950e-0af201d90547', passwordVariable: 'gitPass', usernameVariable: 'gitUsername')]) {
                    sh "git push ${gitRepoUrl} release"
                }
            }
        }
        
		gitlabCommitStatus("add version tag") {
			stage('add version tag') {
				final fullVersion = packageName.substring(packageName.lastIndexOf('@') + 1, packageName.length())
				final version = fullVersion.substring(0, fullVersion.lastIndexOf('.'))

				sh "git clean -fdx"
				sh "git checkout ."
				sh "git tag -a ${version} -m \"version ${version}\""
				sh "git push ${gitRepoUrl} ${version}"
			}
		}
        
		gitlabCommitStatus("create health check") {
			stage('create health check branch'){                
                withCredentials([usernamePassword(credentialsId: '361885ba-9425-4230-950e-0af201d90547', passwordVariable: 'gitPass', usernameVariable: 'gitUsername')]) {
                    sh "git push -d https://$gitUsername:$gitPass@git.auckland.dynabic.com/words-cloud/words-cloud-node.git health_check"
                }
                sh "git branch -D health_check"
                
                sh "git checkout -b health_check"
                
                sh "sed -i 's/asposewordscloud/healthcheck/g' package.json"                        
                sh "find test -type f -name \"*.ts\" -exec sed -i 's+\".*/src/.*\"+\"asposewordscloud\"+g' {} +"
                sh "find bdd -type f -name \"*.ts\" -exec sed -i 's+\".*/src/.*\"+\"asposewordscloud\"+g' {} +"

                sh 'git commit -am "Create health check branch" || exit 0'
        
                withCredentials([usernamePassword(credentialsId: '361885ba-9425-4230-950e-0af201d90547', passwordVariable: 'gitPass', usernameVariable: 'gitUsername')]) {
                    sh "git push -u https://$gitUsername:$gitPass@git.auckland.dynabic.com/words-cloud/words-cloud-node.git health_check"
                }
            }
        }
    } finally {                       
        deleteDir()
		sh 'docker system prune -f'
    }
} 